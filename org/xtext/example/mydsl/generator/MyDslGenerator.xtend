/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Simulation
import org.xtext.example.mydsl.myDsl.Roles
import org.xtext.example.mydsl.myDsl.Rules
import org.xtext.example.mydsl.myDsl.Behaviors
import org.xtext.example.mydsl.myDsl.Assignment
import org.xtext.example.mydsl.myDsl.Statements
import org.xtext.example.mydsl.myDsl.Method
import org.xtext.example.mydsl.myDsl.ConditionExp
import org.xtext.example.mydsl.myDsl.M_List
import org.xtext.example.mydsl.myDsl.Variable
import org.xtext.example.mydsl.myDsl.Loop
import org.xtext.example.mydsl.myDsl.M_Number
import org.xtext.example.mydsl.myDsl.M_Float
import org.xtext.example.mydsl.myDsl.PlusOp
import org.xtext.example.mydsl.myDsl.MinusOp
import org.xtext.example.mydsl.myDsl.DivOp
import org.xtext.example.mydsl.myDsl.MultOp
import org.xtext.example.mydsl.myDsl.ReturnValue
import org.xtext.example.mydsl.myDsl.MethodEmpty
import org.xtext.example.mydsl.myDsl.SetVelocity
import org.xtext.example.mydsl.myDsl.OrOp
import org.xtext.example.mydsl.myDsl.AndOp
import org.xtext.example.mydsl.myDsl.Equality
import org.xtext.example.mydsl.myDsl.NotEquality
import org.xtext.example.mydsl.myDsl.GreaterOp
import org.xtext.example.mydsl.myDsl.LowerOp
import org.xtext.example.mydsl.myDsl.GreaterEqOp
import org.xtext.example.mydsl.myDsl.LowerEqOp
import org.xtext.example.mydsl.myDsl.Condition
import org.xtext.example.mydsl.myDsl.Conditional_Statement
import org.xtext.example.mydsl.myDsl.Sequences
import org.xtext.example.mydsl.myDsl.States
import org.xtext.example.mydsl.myDsl.Propagate
import org.xtext.example.mydsl.myDsl.Negative_Number

//import org.xtext.example.mydsl.myDsl.Conditional_Statement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
String s="	"
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		val simulation= resource.allContents
			.filter(typeof(Simulation)).next
		resource.allContents
			.filter(typeof(Roles)).forEach[generateRoleFile(resource,simulation,fsa)];
			
		val simulation2= resource.allContents
			.filter(typeof(Simulation)).next
		resource.allContents
			.filter(typeof(Sequences)).forEach[generateSequenceFile(resource,simulation,fsa)];
			
		
	}
	
	def generateSequenceFile(Sequences s,Resource resource, Simulation sim, IFileSystemAccess2 fsa) {
		fsa.generateFile(s.name+".py",s.generateSequence(sim));
	}
	def CharSequence generateSequence(Sequences r,Simulation sim)'''
	#!/usr/bin/env python
	from state import State 
	class StateMachine:
	 initial_state=None
	 last_state=None
	 current_state=None
	 count=0
	 #def __init__(self):
	 	
	 def create_initial_state(self,name, role, action_method):
		state=State(name,role,action_method)
	 	self.initial_state=state
	 	self.last_state=state
	 	print "state ",self.count,state.name
	 	#self.count=self.count+1
	 	return self
	 	
	 def create_state(self,name, role, action_method):
		state=State(name,role,action_method)
		self.last_state.next=state
		self.last_state=state
		print "state ",self.count,state.name
		self.count=self.count+1
		return self
	 def set_current_state(self,new_state, state):
	       if state.next==None:
			return
	       elif new_state.name==state.name:
		    current_state=state.name
			 
	       else: 
		    set_current_state(self,new_state,state.next)
	 def build(self):
     	self.«FOR i :1..r.states.size SEPARATOR '.'»«IF(i==1)»«r.states.get(i-1).generate_Initial_State()»«ELSE »«r.states.get(i-1).generateState()»«ENDIF»«ENDFOR»
	'''
	
	def CharSequence generateState(States state)'''
	create_state("«state.state_name»","«state.role_name»","«state.action_name»")'''
	
	
	def CharSequence generate_Initial_State(States state)'''
	create_initial_state("«state.state_name»","«state.role_name»","«state.action_name»")'''
	
	def generateRoleFile(Roles role,Resource resource,Simulation sim,IFileSystemAccess2 fsa){
		fsa.generateFile(role.name+".py",role.generateRole(sim));
	}
	
	def CharSequence generateRole(Roles r,Simulation sim)'''
	#!/usr/bin/env python
	from pvector import PVector
	import numpy
	import math
	#import temperature_function as temp
	#import plugin
	
	def sub_all_x(close_drones, current):
			dx=0
			for other in close_drones:
				dx-=current.xyz[0]-other.xyz[0]
			return dx
						
	def sub_all_y(close_drones, current):
			dy=0
			for other in close_drones:
				dy-=current.xyz[1]-other.xyz[1]
			return dy
	def sum_all_x(close_drones, current):
			dx=0
			for other in close_drones:
				dx+=other.xyz[0]
			return dx
						
	def sum_all_y(close_drones, current):
			dy=0
			for other in close_drones:
				dy+=other.xyz[1]
			return dy
		
	def sum_all_vel_x(close_drones, current):
			dx=0
			for other in close_drones:
				dx+=other.v_ned_d[0]
			return dx
						
	def sum_all_vel_y(close_drones, current):
			dy=0
			for other in close_drones:
				dy+=other.v_ned_d[1]
			return dy
		
	def find_neighbours_in_radius(current,radius):
			agents=current.group.neibourgh_list
			neibourgh=[]
			for it in agents:
				if euclidean_distance(it.xyz,current.xyz)<=radius:
					neibourgh.append(it)
			return neibourgh
		
	def euclidean_distance(a,b):
			distance=math.sqrt(pow((a[0] - b[0]), 2) + pow((a[1] - b[1]), 2))
			return distance
			
	«FOR member :r.members»
		«member.generateMember()»
	«ENDFOR»
	'''
	def dispatch CharSequence generateMember(Rules rule)'''
	
	def «rule.name» (current):
		alt_d=8
		position=PVector(current.xyz[0],current.xyz[1])
	«FOR stats :rule.statements»
			«stats.generateStatement()»
	«ENDFOR»		
	'''
	
	def CharSequence generateStatement(Statements stats)	
	'''	«stats.generateAssignment()»'''
	def dispatch CharSequence generateAssignment(Assignment ass)
	'''«ass.right.name»=«ass.left.generateLeft()»«ass.check_if()»'''
	
	def CharSequence check_if(Assignment ass)'''
	«IF(contains(ass.left.generateLeft().toString(),"find_neighbours_in_radius")==true)»
	if len(«ass.right.name»)==0:
		velocity=PVector(current.v_ned_d[0],current.v_ned_d[1])
		current.set_v_2D_alt_lya(velocity.return_as_vector(),-alt_d)
		return 
	«ENDIF»
	'''
	def dispatch CharSequence generateAssignment(Propagate prop)''' '''
	def dispatch CharSequence generateAssignment(ReturnValue ret)'''
	«ret.result.generateExp()».normalize()
	return 	«ret.result.generateExp()».return_as_vector()
	'''
	def dispatch CharSequence generateAssignment(SetVelocity set)'''
	alt_d=8
	current.set_v_2D_alt_lya(«set.variable.name»,-alt_d)
	'''
	def dispatch CharSequence generateAssignment(Conditional_Statement con)''''''
	def dispatch CharSequence generateMember(Behaviors behavior)'''
	def «behavior.name» (current):
	«FOR stats :behavior.statements»
			«stats.generateStatement()»
	«ENDFOR»				
	'''
	def dispatch CharSequence generateLeft(M_List list)''' 
	PVector(«list.x.generateExp()»,«list.y.generateExp()»)
	'''
	def dispatch CharSequence generateLeft(ConditionExp exp)'''«exp.generateExp()»'''
		
	def dispatch CharSequence generateExp(Method met)'''
	«met.name»(«met.argument.generateArgument()»)
	'''
	def dispatch CharSequence generateExp(MethodEmpty met)'''«met.name»(current)'''
	
	def dispatch CharSequence generateArgument(M_Number numb)'''current,«numb.digit»'''
	def dispatch CharSequence generateArgument(M_Float float_num)''' '''
	def dispatch CharSequence generateArgument(Variable variable)''' '''
	def dispatch CharSequence generateArgument(Loop loop)'''
	«loop.list»,current'''
	
	
	def dispatch CharSequence generateExp(OrOp pop) '''(«pop.left.generateExp»||«pop.right.generateExp»)'''
	def dispatch CharSequence generateExp(AndOp pop) '''(«pop.left.generateExp»&&«pop.right.generateExp»)'''
	
	def dispatch CharSequence generateExp(Equality pop) '''(«pop.left.generateExp»==«pop.right.generateExp»)'''
	def dispatch CharSequence generateExp(NotEquality pop) '''(«pop.left.generateExp»!=«pop.right.generateExp»)'''
	
	def dispatch CharSequence generateExp(GreaterOp pop) '''(«pop.left.generateExp»>«pop.right.generateExp»)'''
	def dispatch CharSequence generateExp(LowerOp pop) '''(«pop.left.generateExp»<«pop.right.generateExp»)'''
	def dispatch CharSequence generateExp(GreaterEqOp pop) '''(«pop.left.generateExp»>=«pop.right.generateExp»)'''
	def dispatch CharSequence generateExp(LowerEqOp pop) '''(«pop.left.generateExp»<=«pop.right.generateExp»)'''
	
	def dispatch CharSequence generateExp(PlusOp pop) '''(«pop.left.generateExp»+«pop.right.generateExp»)'''
	def dispatch CharSequence generateExp(MinusOp pop) '''(«pop.left.generateExp»-«pop.right.generateExp»)'''
	def dispatch CharSequence generateExp(DivOp pop) '''(«pop.left.generateExp»/«pop.right.generateExp»)'''
	def dispatch CharSequence generateExp(MultOp mop) '''(«mop.left.generateExp»*«mop.right.generateExp»)'''
	
	def dispatch CharSequence generateExp(M_Number number) '''«number.digit»'''
	def dispatch CharSequence generateExp(Negative_Number number) '''-«number.numb»'''
	def dispatch CharSequence generateExp(M_Float number) ''''''
	def dispatch CharSequence generateExp(Variable variable)'''
	«IF(isNull(variable.suffix)==false &&  variable.suffix=="length")»len(«variable.name»)«ENDIF»«IF(isNull(variable.suffix)==false && variable.suffix!="length")»«variable.name».«variable.suffix»«ENDIF»«IF isNull(variable.suffix)==true»«variable.name»«ENDIF»'''
	
	def isNull(String s){
		if (s==null) {
			return true
		}
		else return false
		
	}
	
	def contains(String one,String two){
		if(one.contains(two)==true){
			return true
			}
		else return false
		}
	}

